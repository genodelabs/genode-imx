if {[have_spec "arm_v8a"]} {
	set board_info(arch)    "arm_v8a"
	set board_info(lx_arch) "arm64"

} elseif {[have_spec "arm_v7a"]} {
	set board_info(arch)    "arm_v7a"
	set board_info(lx_arch) "arm"

} else {
	assert {false} "Run script is not supported on this platform."
}

switch [board] {
	imx8mp_armstone {
		set board_info(uart)             "ttymxc1"
		set board_info(kernel_load_addr) "0x40200000"
		set board_info(dtb)              "[pwd]/imx_linux/arm_v8a/arch/arm64/boot/dts/F+S/armstonemx8mp.dtb"
	}
	imx8mp_iot_gate {
		set board_info(uart)             "ttymxc1"
		set board_info(kernel_load_addr) "0x40200000"
		set board_info(dtb)              "[pwd]/imx_linux/arm_v8a/arch/arm64/boot/dts/compulab/iot-gate-imx8plus-m2tpm.dtb"
	}
	imx8q_evk {
		set board_info(uart)             "ttymxc0"
		set board_info(kernel_load_addr) "0x40200000"
		set board_info(dtb)              "[pwd]/imx_linux/arm_v8a/arch/arm64/boot/dts/freescale/imx8mq-evk.dtb"
	}
	mnt_pocket {
		set board_info(uart)             "ttymxc1"
		set board_info(kernel_load_addr) "0x40200000"
		set board_info(dtb)              "[pwd]/imx_linux/arm_v8a/arch/arm64/boot/dts/freescale/imx8mp-mnt-pocket-reform.dtb"
	}
	mnt_reform2 {
		set board_info(uart)             "ttymxc0"
		set board_info(kernel_load_addr) "0x40200000"
		set board_info(dtb)              "[pwd]/imx_linux/arm_v8a/arch/arm64/boot/dts/freescale/imx8mq-mnt-reform2-hdmi.dtb"
	}
	default {
		assert {false} "Run script is not supported on this platform."
	}
}

set board_info(dtb_load_addr)    [expr {$board_info(kernel_load_addr) + 0x1000000}]
set board_info(initrd_load_addr) [expr {$board_info(dtb_load_addr)    + 0x1000000}]

if {![have_include image/uboot] || ![image_uboot_use_fit]} {
	puts "Only FIT image are suported at the moment."
	exit 1
}

create_boot_directory

build { imx_linux busybox memtool }

# Create expected boot directory, as we cannot use build_boot_image
exec mkdir -p [run_dir]/boot

# Following pathes, must be absolute
set itb_image [pwd]/[run_dir]/boot/image.itb
set ramdisk   [pwd]/[run_dir]/cpio

#
# Create script to run inside the initramfs under /etc/init.d/rcS
#
proc init_rcs { } {
	set fd [open [run_dir]/rcS w]
	puts $fd {#!bin/sh
mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /var
mount -t tmpfs none /dev
/sbin/mdev -s
mkdir /var/log}
	close $fd
	return [pwd]/[run_dir]/rcS
}

set init_rcs [init_rcs]

#
# CPIO content description used by `gen_init_cpio`
#
proc cpio_desc { } {
	global board_info
	global init_rcs
	set bblist [open busybox/$board_info(arch)/busybox.links r]
	set fd     [open [run_dir]/cpio.desc w]

	puts $fd "dir  /bin         0755 0 0"
	puts $fd "dir  /dev         0755 0 0"
	puts $fd "dir  /etc         0755 0 0"
	puts $fd "dir  /etc/init.d  0755 0 0"
	puts $fd "dir  /proc        0755 0 0"
	puts $fd "dir  /root        0700 0 0"
	puts $fd "dir  /sbin        0755 0 0"
	puts $fd "dir  /sys         0755 0 0"
	puts $fd "dir  /usr         0755 0 0"
	puts $fd "dir  /usr/bin     0755 0 0"
	puts $fd "dir  /usr/sbin    0755 0 0"
	puts $fd "dir  /var         0755 0 0"
	puts $fd "nod  /dev/console 0622 0 0 c 5 1"
	puts $fd "nod  /dev/null    0666 0 0 c 1 3"
	puts $fd "file /bin/busybox busybox/$board_info(arch)/busybox 0755 0 0"
	puts $fd "file /bin/memtool memtool/$board_info(arch)/memtool 0755 0 0"
	puts $fd "file /etc/init.d/rcS $init_rcs 0755 0 0"

	foreach line [split [read $bblist] \n] {
		if {[string trim $line] != ""} {
			puts $fd "slink $line /bin/busybox 0755 0 0"
		}
	}
	close $bblist
	close $fd

	return [pwd]/[run_dir]/cpio.desc
}

#
# Create additional u-boot script that sets the kernel cmdline
#
proc boot_script { } {
	global board_info
	set fd [open [run_dir]/boot.scr w]
	puts $fd "setenv bootargs 'console=$board_info(uart),115200 root=/dev/ram ip=dhcp rdinit=/linuxrc'
bootm  \${loadaddr}
echo 'Bad image or kernel.'
reset"
	close $fd
	return [pwd]/[run_dir]/boot.scr
}

set boot_scr  [boot_script]

#
# Create source file for FIT image generation
#
proc its_file { } {
	global board_info
	global ramdisk
	global boot_scr
	set fd [open [run_dir]/image.its w]
	set kernel [pwd]/imx_linux/$board_info(arch)/arch/$board_info(lx_arch)/boot/Image.gz
	puts $fd "/dts-v1/;
/ {
        description = \"[board] FIT Image\";
        #address-cells = <1>;
        images {
                kernel {
                        description = \"Kernel\";
                        data = /incbin/(\"$kernel\");
                        type = \"kernel\";
                        arch = \"$board_info(lx_arch)\";
                        os = \"linux\";
                        compression = \"gzip\";
                        load = <$board_info(kernel_load_addr)>;
                        entry = <$board_info(kernel_load_addr)>;
                        hash {
                                algo = \"sha1\";
                        };
                };
                fdt {
                        description = \"DTB\";
                        data = /incbin/(\"$board_info(dtb)\");
                        type = \"flat_dt\";
                        arch = \"$board_info(lx_arch)\";
                        compression = \"none\";
                        load = <$board_info(dtb_load_addr)>;
                        hash {
                                algo = \"sha1\";
                        };
                };
                ramdisk {
                        description = \"Initial RAM Filesystem\";
                        data = /incbin/(\"$ramdisk\");
                        type = \"ramdisk\";
                        os = \"linux\";
                        arch = \"$board_info(lx_arch)\";
                        compression = \"none\";
                        load = <$board_info(initrd_load_addr)>;
                        hash {
                                algo = \"sha1\";
                        };
                };
                bootscript {
                        description = \"bootscript\";
                        data = /incbin/(\"$boot_scr\");
                        type = \"script\";
                        compression = \"none\";
                };
        };
        configurations {
                default = \"standard\";
                standard {
                        description = \"Standard Boot\";
                        kernel = \"kernel\";
                        fdt = \"fdt\";
                        ramdisk = \"ramdisk\";
                        hash {
                                algo = \"sha1\";
                        };
                };
        };
};"
	close $fd
	return [pwd]/[run_dir]/image.its
}

set its_cfg   [its_file]
set cpio_desc [cpio_desc]

# Create initial-ram-filesystem
exec imx_linux/$board_info(arch)/usr/gen_init_cpio $cpio_desc > $ramdisk

# Generate FIT image
exec mkimage -f $its_cfg $itb_image

# Clean intermediate files
exec rm $its_cfg $cpio_desc $ramdisk $init_rcs $boot_scr

# Export the image to the TFTP dir manually as we do not run 'build_boot_image' directive
if {[have_include "load/tftp"]} {
	exec {*}[load_tftp_inst_cmd] \
		[file join [pwd] [run_dir] boot image.itb] \
		[load_tftp_base_dir][load_tftp_offset_dir]
}

# Trick run tools that the kernel started
proc run_boot_string { } { return "Booting Linux" }

puts "FIT image can be found under [run_dir]/boot/image.itb"
puts "load it via u-boot to a loadaddr, and start it via: source \${loadaddr}:bootscript"

run_genode_until forever
interact
