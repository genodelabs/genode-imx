assert {[have_board mnt_reform2]}

source ${genode_dir}/repos/dde_linux/run/wifi_config.inc

create_boot_directory

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/src/init \
                  [depot_user]/src/report_rom \
                  [depot_user]/src/rom_filter \
                  [depot_user]/src/dynamic_rom \
                  [depot_user]/src/nic_router \
                  [depot_user]/src/dummy_rtc \
                  [depot_user]/src/imx8mq_platform \
                  [depot_user]/src/imx_pin \
                  [depot_user]/src/imx8mq_pci_host \
                  [depot_user]/pkg/imx8mq_wifi \
                  [depot_user]/raw/mnt_reform2-devices

#
# Build
#

set build_components {
	test/lwip/http_srv
	lib/vfs_jitterentropy
	lib/vfs_lwip
}

build $build_components


#
# Generate config
#

append config {
<config verbose="yes" prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100" ram="1M"/>

	<start name="timer">
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="report_rom" ram="2M">
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no">
			<policy label="rom_filter -> pci_devices" report="imx8mq_pci_host -> devices"/>
		</config>
	</start>

	<start name="rom_filter" caps="70">
		<provides> <service name="ROM" /> </provides>
		<config buffer="32K">
			<input name="devices"/>
			<input name="pci_devices"/>
			<output node="devices">
				<input name="devices"     skip_toplevel="yes"/>
				<input name="pci_devices" skip_toplevel="yes"/>
			</output>
		</config>
		<route>
			<service name="ROM" label="pci_devices"> <child name="report_rom"/> </service>
			<service name="LOG"> <parent/> </service>
			<service name="PD">  <parent/> </service>
			<service name="CPU"> <parent/> </service>
			<service name="ROM"> <parent/> </service>
		</route>
	</start>

	<start name="platform" caps="300" ram="2M" managing_system="yes">
		<binary name="imx8mq_platform"/>
		<provides> <service name="Platform"/> </provides>
		<config>
			<policy label="gpio -> " info="yes">
				<device name="gpio1"/>
				<device name="gpio2"/>
				<device name="gpio3"/>
				<device name="gpio4"/>
				<device name="gpio5"/>
			</policy>

			<policy label="imx8mq_pci_host -> " info="yes">
				<device name="pcie_1"/>
				<!-- <device name="pcie_2"/> -->
			</policy>

			<policy label="wifi -> " info="yes">
				<pci class="WIFI"/>
			</policy>
		</config>
		<route>
			<service name="Report" label="devices"> <parent label="devices"/> </service>
			<service name="ROM" label="devices"> <child name="rom_filter"/> </service>
			<service name="Timer">    <child name="timer"/>        </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="gpio" caps="150" ram="2M">
		<binary name="imx_pio"/>
		<provides>
			<service name="Pin_control"/>
			<service name="Pin_state"/>
			<service name="IRQ"/>
		</provides>
		<route>
			<service name="RM">       <parent/> </service>
			<service name="ROM">      <parent/> </service>
			<service name="PD">       <parent/> </service>
			<service name="CPU">      <parent/> </service>
			<service name="LOG">      <parent/> </service>
			<service name="Platform"> <child name="platform"/> </service>
		</route>
		<config>
			<out name="pcie0_reset_deassert" bank="4" index="7"  default="on"/>
			<out name="pcie1_reset_deassert" bank="2" index="23" default="on"/>
			<policy label="imx8mq_pci_host -> " pin="pcie0_reset_deassert"/>
		</config>
	</start>

	<start name="imx8mq_pci_host">
		<route>
			<service name="RM">        <parent/> </service>
			<service name="ROM">       <parent/> </service>
			<service name="PD">        <parent/> </service>
			<service name="CPU">       <parent/> </service>
			<service name="LOG">       <parent/> </service>
			<service name="Timer">     <child name="timer"/>      </service>
			<service name="Report">    <child name="report_rom"/> </service>
			<service name="Platform">  <child name="platform"/>   </service>
			<service name="Pin_state"> <child name="gpio"/>       </service>
		</route>
	</start>

	<start name="dummy_rtc">
		<provides> <service name="Rtc"/> </provides>
		<config year="2023" month="01" day="19" hour="16" minute="0" second="0"/>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="test-lwip_httpsrv" ram="128M">
		<config>
			<libc stdout="/dev/null" stderr="/dev/log" socket="/socket"/>
			<vfs>
				<dir name="dev"> <log/> <null/> </dir>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
			</vfs>
		</config>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="state_report_rom" ram="2M">
		<binary name="report_rom"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no"/>
	</start>

	<start name="accesspoints_report_rom" ram="2M">
		<binary name="report_rom"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no"/>
	</start>

	<start name="config_rom" ram="4M">
		<binary name="dynamic_rom"/>
		<provides><service name="ROM"/></provides>
		<config verbose="yes">
			<rom name="wifi_config">
				<inline description="disconnect">
} [wifi_config 5 10 no {}] {
				</inline>
				<sleep milliseconds="15000"/>
				<inline description="connect">
} [wifi_config 5 10 no [list "[wifi_ssid] [wifi_wpa] [wifi_psk] no"]] {
				</inline>
				<sleep milliseconds="600000"/>
				<inline description="rfkill block">
} [wifi_config 5 10 yes [list "[wifi_ssid] [wifi_wpa] [wifi_psk] no"]] {
				</inline>
				<sleep milliseconds="30000"/>
				<inline description="rfkill unblock">
} [wifi_config 5 10 no [list "[wifi_ssid] [wifi_wpa] [wifi_psk] no"]] {
				</inline>
				<sleep milliseconds="30000"/>
			</rom>
		</config>
	</start>

	<start name="nic_router" caps="150" ram="8M">
		<provides>
			<service name="Nic"/>
			<service name="Uplink"/>
		</provides>
		<config verbose="no" verbose_domain_state="yes" dhcp_discover_timeout_sec="10" dhcp_request_timeout_sec="6">

			<policy label_prefix="test-lwip_httpsrv" domain="downlink"/>
			<policy label_prefix="wifi"              domain="uplink"/>

			<domain name="uplink" verbose_packets="no" verbose_packet_drop="no" icmp_echo_server="yes">

				<nat domain="downlink" tcp-ports="16384"/>
				<tcp-forward port="443" domain="downlink" to="10.0.3.2"/>
				<tcp-forward port="80"  domain="downlink" to="10.0.3.2"/>

			</domain>

			<domain name="downlink" verbose_packets="no" verbose_packet_drop="no" interface="10.0.3.1/24">

				<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2"/>

			</domain>

		</config>
	</start>

	<start name="devices_report_rom" ram="1200K">
		<binary name="report_rom"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="wifi" caps="250" ram="32M" priority="-1">
		<config ld_verbose="yes">
			<report mac_address="true"/>
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" rng="/dev/urandom"/>
			<vfs>
				<dir name="dev"> <log/> <null/> <rtc/>
					<jitterentropy name="random"/>
					<jitterentropy name="urandom"/>
				</dir>
				<dir name="firmware">
					<tar name="wifi_firmware.tar"/>
				</dir>
			</vfs>
		</config>
		<route>
			<service name="Uplink"> <child name="nic_router"/> </service>
			<service name="Rtc"> <any-child/> </service>
			<service name="Report" label="accesspoints"> <child name="accesspoints_report_rom"/> </service>
			<service name="Report" label="state"> <child name="state_report_rom"/> </service>
			<service name="Report" label="devices"> <child name="devices_report_rom"/> </service>
			<service name="ROM" label="wifi_config"> <child name="config_rom"/> </service>
			<service name="ROM" label="wifi.lib.so"> <parent label="imx8mq_wifi.lib.so"/> </service>
			<service name="ROM" label="wifi_firmware.tar"> <parent label="imx8mq_wifi_firmware.tar"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>
}

install_config $config
build_boot_image [build_artifacts]
run_genode_until forever

# vi: set ft=tcl :
