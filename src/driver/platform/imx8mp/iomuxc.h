/*
 * \brief  IOMUX controller for i.MX8MP
 * \author Stefan Kalkowski
 * \date   2024-06-08
 */

/*
 * Copyright (C) 2024 Genode Labs GmbH
 *
 * This file is part of the Genode OS framework, which is distributed
 * under the terms of the GNU Affero General Public License version 3.
 */

#ifndef __PLATFORM__IMX__IOMUXC_H_
#define __PLATFORM__IMX__IOMUXC_H_

#include <os/attached_mmio.h>
#include <base/node.h>

namespace Driver {
	using namespace Genode;

	struct Iomuxc;
};


/* The following values are taken from device-tree sources of the
 * vendor from their Linux kernel forks, therefore they have this
 * specific form of arrays:
 */
enum Indices {
	MUX_REG, CONF_REG, INPUT_REG, MUX_MODE, INPUT_VAL, CONF_VAL, MAX };

static Genode::uint32_t iot_gate_pinctrl_setting [][MAX] {
	/* pinctrl_ie_di4o4 */
	{ 0x1d4, 0x434, 0x000, 0x5, 0x0, 0x00  },
	{ 0x1c8, 0x428, 0x000, 0x5, 0x0, 0x00  },
	{ 0x1c4, 0x424, 0x000, 0x5, 0x0, 0x00  },
	{ 0x1bc, 0x41c, 0x000, 0x5, 0x0, 0x00  },
	{ 0x1c0, 0x420, 0x000, 0x5, 0x0, 0x100 },
	{ 0x1d8, 0x438, 0x000, 0x5, 0x0, 0x100 },
	{ 0x018, 0x278, 0x000, 0x0, 0x0, 0x100 },
	{ 0x178, 0x3d8, 0x000, 0x5, 0x0, 0x100 },

	/* pinctrl_usdhc3_200mhz */
	{ 0x124, 0x384, 0x604, 0x2, 0x1, 0x196 },
	{ 0x128, 0x388, 0x60c, 0x2, 0x1, 0x1d6 },
	{ 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d6 },
	{ 0x10c, 0x36c, 0x614, 0x2, 0x1, 0x1d6 },
	{ 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d6 },
	{ 0x114, 0x374, 0x61c, 0x2, 0x1, 0x1d6 },
	{ 0x11c, 0x37c, 0x620, 0x2, 0x1, 0x1d6 },
	{ 0x0ec, 0x34c, 0x624, 0x2, 0x1, 0x1d6 },
	{ 0x0f0, 0x350, 0x628, 0x2, 0x1, 0x1d6 },
	{ 0x0f4, 0x354, 0x62c, 0x2, 0x1, 0x1d6 },
	{ 0x0e8, 0x348, 0x630, 0x2, 0x1, 0x196 },

	/* pinctrl_fec */
	{ 0x08c, 0x2ec, 0x000, 0x1, 0x0, 0x3  },
	{ 0x090, 0x2f0, 0x57c, 0x1, 0x0, 0x3  },
	{ 0x09c, 0x2fc, 0x580, 0x1, 0x0, 0x91 },
	{ 0x0a0, 0x300, 0x584, 0x1, 0x0, 0x91 },
	{ 0x168, 0x3c8, 0x000, 0x4, 0x0, 0x91 },
	{ 0x16c, 0x3cc, 0x000, 0x4, 0x0, 0x91 },
	{ 0x174, 0x3d4, 0x000, 0x4, 0x0, 0x91 },
	{ 0x170, 0x3d0, 0x588, 0x4, 0x1, 0x91 },
	{ 0x098, 0x2f8, 0x000, 0x1, 0x0, 0x1f },
	{ 0x094, 0x2f4, 0x000, 0x1, 0x0, 0x1f },
	{ 0x180, 0x3e0, 0x000, 0x4, 0x0, 0x1f },
	{ 0x184, 0x3e4, 0x000, 0x4, 0x0, 0x1f },
	{ 0x188, 0x3e8, 0x000, 0x4, 0x0, 0x1f },
	{ 0x18c, 0x3ec, 0x000, 0x4, 0x0, 0x1f },

	/* pinctrl_eqos */
	{ 0x054, 0x2b4, 0x000, 0x0, 0x0, 0x3  },
	{ 0x058, 0x2b8, 0x590, 0x0, 0x1, 0x3  },
	{ 0x07c, 0x2dc, 0x000, 0x0, 0x0, 0x91 },
	{ 0x080, 0x2e0, 0x000, 0x0, 0x0, 0x91 },
	{ 0x084, 0x2e4, 0x000, 0x0, 0x0, 0x91 },
	{ 0x088, 0x2e8, 0x000, 0x0, 0x0, 0x91 },
	{ 0x078, 0x2d8, 0x000, 0x0, 0x0, 0x91 },
	{ 0x074, 0x2d4, 0x000, 0x0, 0x0, 0x91 },
	{ 0x068, 0x2c8, 0x000, 0x0, 0x0, 0x1f },
	{ 0x064, 0x2c4, 0x000, 0x0, 0x0, 0x1f },
	{ 0x060, 0x2c0, 0x000, 0x0, 0x0, 0x1f },
	{ 0x05c, 0x2bc, 0x000, 0x0, 0x0, 0x1f },
	{ 0x06c, 0x2cc, 0x000, 0x0, 0x0, 0x1f },
	{ 0x070, 0x2d0, 0x000, 0x0, 0x0, 0x1f },

	/* usb_hub_reset -  MX8MP_IOMUXC_SD1_RESET_B__GPIO2_IO10 */
	{ 0x0B4, 0x314, 0x000, 0x5, 0x0, 0x19 },

	/* usb2_vbus_en - MX8MP_IOMUXC_SAI1_MCLK__GPIO4_IO20 */
	{ 0x198, 0x3F8, 0x000, 0x5, 0x0, 0x154 },

	/* usb_dwc3_0 - MX8MP_IOMUXC_GPIO1_IO15__GPIO1_IO15 */
	{ 0x050, 0x2B0, 0x000, 0x0, 0x0, 0x114 },

	/* pinctl_usb */
	{ 0x050, 0x2B0, 0x000, 0x0, 0x0, 0x114 },

	/* pinctrl_i2c2 */
	{ 0x208, 0x468, 0x5ac, 0x0, 0x2, 0x400001c3 },
	{ 0x20c, 0x46c, 0x5b0, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_wdog */
	{ 0x01c, 0x27c, 0x000, 0x1, 0x0, 0xc6 }
};


static Genode::uint32_t mnt_pocket_pinctrl_setting [][MAX] {
	/* pinctrl_eqos */
	{ 0x054, 0x2B4, 0x000, 0x0, 0x0, 0x20  },
	{ 0x058, 0x2B8, 0x590, 0x0, 0x1, 0xa0  },
	{ 0x06C, 0x2CC, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x070, 0x2D0, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x068, 0x2C8, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x064, 0x2C4, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x060, 0x2C0, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x05C, 0x2BC, 0x000, 0x0, 0x0, 0x1f  },
	{ 0x074, 0x2D4, 0x000, 0x0, 0x0, 0x91  },
	{ 0x078, 0x2D8, 0x000, 0x0, 0x0, 0x91  },
	{ 0x07C, 0x2DC, 0x000, 0x0, 0x0, 0x91  },
	{ 0x080, 0x2E0, 0x000, 0x0, 0x0, 0x91  },
	{ 0x084, 0x2E4, 0x000, 0x0, 0x0, 0x91  },
	{ 0x088, 0x2E8, 0x000, 0x0, 0x0, 0x91  },
	{ 0x120, 0x380, 0x000, 0x5, 0x0, 0x100 },
	{ 0x118, 0x378, 0x000, 0x5, 0x0, 0x10  },

	/* pinctrl_hog */
	{ 0x1D8, 0x438, 0x000, 0x5, 0x0, 0x41  },
	{ 0x1DC, 0x43C, 0x000, 0x5, 0x0, 0x41  },
	{ 0x1D4, 0x434, 0x000, 0x5, 0x0, 0x41  },
	{ 0x0B4, 0x314, 0x000, 0x5, 0x0, 0x41  },
	{ 0x0AC, 0x30C, 0x000, 0x5, 0x0, 0x41  },
	{ 0x0A8, 0x308, 0x000, 0x5, 0x0, 0x41  },
	{ 0x198, 0x3F8, 0x000, 0x5, 0x0, 0x16  },
	{ 0x194, 0x3F4, 0x000, 0x5, 0x0, 0x1c4 },

	/* pinctrl_panel */
	{ 0x02C, 0x28C, 0x000, 0x0, 0x0, 0x140 },
	{ 0x030, 0x290, 0x000, 0x0, 0x0, 0x140 },
	{ 0x0A4, 0x304, 0x000, 0x5, 0x0, 0x41  },

	/* pinctrl_hdmi */
	{ 0x240, 0x4A0, 0x000, 0x0, 0x0, 0x1c3 },
	{ 0x244, 0x4A4, 0x000, 0x0, 0x0, 0x1c3 },
	{ 0x24C, 0x4AC, 0x000, 0x0, 0x0, 0x19  },
	{ 0x248, 0x4A8, 0x000, 0x0, 0x0, 0x19  },

	/* pinctrl_bt_rfkill */
	{ 0x104, 0x364, 0x000, 0x5, 0x0, 0x119 },

	/* pinctrl_ecspi2 */
	{ 0x1F0, 0x450, 0x568, 0x0, 0x1, 0x82 },
	{ 0x1F4, 0x454, 0x570, 0x0, 0x1, 0x82 },
	{ 0x1F8, 0x458, 0x56C, 0x0, 0x1, 0x82 },
	{ 0x1FC, 0x45C, 0x000, 0x5, 0x0, 0x143 },

	/* pinctrl_i2c1 */
	{ 0x200, 0x460, 0x5A4, 0x0, 0x2, 0x400001c3 },
	{ 0x204, 0x464, 0x5A8, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_i2c1_1 */
	{ 0x200, 0x460, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x204, 0x464, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_i2c2 */
	{ 0x208, 0x468, 0x5AC, 0x0, 0x2, 0x400001c3 },
	{ 0x20C, 0x46C, 0x5B0, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_i2c2_1 */
	{ 0x208, 0x468, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x20C, 0x46C, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_i2c3 */
	{ 0x210, 0x470, 0x5B4, 0x0, 0x4, 0x400001c3 },
	{ 0x214, 0x474, 0x5B8, 0x0, 0x4, 0x400001c3 },

	/* pinctrl_i2c3_1 */
	{ 0x210, 0x470, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x214, 0x474, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_i2c4 */
	{ 0x218, 0x478, 0x5BC, 0x0, 0x5, 0x400001c3 },
	{ 0x21C, 0x47C, 0x5C0, 0x0, 0x5, 0x400001c3 },

	/* pinctrl_i2c4_1 */
	{ 0x218, 0x478, 0x000, 0x5, 0x0, 0x1c3 },
	{ 0x21C, 0x47C, 0x000, 0x5, 0x0, 0x1c3 },

	/* pinctrl_reg_wlan_vmmc */
	{ 0x0D8, 0x338, 0x000, 0x5, 0x0, 0x16, },

	/* pinctrl_sai2 */
	{ 0x1A8, 0x408, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x19C, 0x3FC, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1AC, 0x40C, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1A0, 0x400, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1A4, 0x404, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1B0, 0x410, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1B4, 0x414, 0x000, 0x0, 0x0, 0xd6 },

	/* pinctrl_sai3 */
	{ 0x1C4, 0x424, 0x4EC, 0x0, 0x1, 0xd6 },
	{ 0x1B8, 0x418, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1C8, 0x428, 0x4E8, 0x0, 0x1, 0xd6 },
	{ 0x1BC, 0x41C, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1C0, 0x420, 0x4E4, 0x0, 0x1, 0xd6 },
	{ 0x1CC, 0x42C, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1D0, 0x430, 0x4E0, 0x0, 0x2, 0xd6 },

	/* pinctrl_pcie */
	{ 0x040, 0x2A0, 0x000, 0x0, 0x0, 0x41 },

	/* pinctrl_pmic */
	{ 0x0E0, 0x340, 0x000, 0x5, 0x0, 0x41 },

	/* pinctrl_edp_bridge */
	{ 0x024, 0x284, 0x000, 0x0, 0x0, 0x100 },

	/* pinctrl_uart1 */
	{ 0x220, 0x480, 0x5E8, 0x0, 0x4, 0x140 },
	{ 0x224, 0x484, 0x000, 0x0, 0x0, 0x140 },
	{ 0x230, 0x490, 0x000, 0x1, 0x0, 0x140 },
	{ 0x234, 0x494, 0x5E4, 0x1, 0x5, 0x140 },
	{ 0x104, 0x364, 0x000, 0x5, 0x0, 0x119 },

	/* pinctrl_uart2 */
	{ 0x228, 0x488, 0x5F0, 0x0, 0x6, 0x140 },
	{ 0x22C, 0x48C, 0x000, 0x0, 0x0, 0x140 },

	/* pinctrl_uart3 */
	{ 0x1E0, 0x440, 0x5F8, 0x1, 0x4, 0x140 },
	{ 0x1E4, 0x444, 0x000, 0x1, 0x0, 0x140 },

	/* pinctrl_uart4 */
	{ 0x238, 0x498, 0x600, 0x0, 0x8, 0x140 },
	{ 0x23C, 0x49C, 0x000, 0x0, 0x0, 0x140 },

	/* pinctrl_usb1_vbus */
	{ 0x04C, 0x2AC, 0x000, 0x1, 0x0, 0x10 },

	/* pinctrl_usdhc1 */
	/* { 0x08C, 0x2EC, 0x000, 0x0, 0x0, 0x190 }, */
	/* { 0x090, 0x2F0, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x094, 0x2F4, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x098, 0x2F8, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x09C, 0x2FC, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x0A0, 0x300, 0x000, 0x0, 0x0, 0x1d0 }, */

	/* pinctrl_usdhc1_100mhz */
	/* { 0x08C, 0x2EC, 0x000, 0x0, 0x0, 0x194 }, */
	/* { 0x090, 0x2F0, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x094, 0x2F4, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x098, 0x2F8, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x09C, 0x2FC, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x0A0, 0x300, 0x000, 0x0, 0x0, 0x1d4 }, */

	/* pinctrl_usdhc1_200mhz */
	{ 0x08C, 0x2EC, 0x000, 0x0, 0x0, 0x196 },
	{ 0x090, 0x2F0, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x094, 0x2F4, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x098, 0x2F8, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x09C, 0x2FC, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0A0, 0x300, 0x000, 0x0, 0x0, 0x1d6 },

	/* pinctrl_usdhc1_gpio */
	{ 0x0B8, 0x318, 0x000, 0x5, 0x0, 0x1c4 },

	/* pinctrl_usdhc2 */
	/* { 0x0C0, 0x320, 0x000, 0x0, 0x0, 0x190 }, */
	/* { 0x0C4, 0x324, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x0C8, 0x328, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x0CC, 0x32C, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x0D0, 0x330, 0x000, 0x0, 0x0, 0x1d0 }, */
	/* { 0x0D4, 0x334, 0x000, 0x0, 0x0, 0x1d0 }, */

	/* pinctrl_usdhc2_100mhz */
	/* { 0x0C0, 0x320, 0x000, 0x0, 0x0, 0x194 }, */
	/* { 0x0C4, 0x324, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x0C8, 0x328, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x0CC, 0x32C, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x0D0, 0x330, 0x000, 0x0, 0x0, 0x1d4 }, */
	/* { 0x0D4, 0x334, 0x000, 0x0, 0x0, 0x1d4 }, */

	/* pinctrl_usdhc2_200mhz */
	{ 0x0C0, 0x320, 0x000, 0x0, 0x0, 0x196 },
	{ 0x0C4, 0x324, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0C8, 0x328, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0CC, 0x32C, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0D0, 0x330, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0D4, 0x334, 0x000, 0x0, 0x0, 0x1d6 },

	/* pinctrl_usdhc3 */
	/* { 0x124, 0x384, 0x604, 0x2, 0x1, 0x190 }, */
	/* { 0x128, 0x388, 0x60C, 0x2, 0x1, 0x1d0 }, */
	/* { 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d0 }, */
	/* { 0x10C, 0x36C, 0x614, 0x2, 0x1, 0x1d0 }, */
	/* { 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d0 }, */
	/* { 0x114, 0x374, 0x61C, 0x2, 0x1, 0x1d0 }, */
	/* { 0x11C, 0x37C, 0x620, 0x2, 0x1, 0x1d0 }, */
	/* { 0x0EC, 0x34C, 0x624, 0x2, 0x1, 0x1d0 }, */
	/* { 0x0F0, 0x350, 0x628, 0x2, 0x1, 0x1d0 }, */
	/* { 0x0F4, 0x354, 0x62C, 0x2, 0x1, 0x1d0 }, */
	/* { 0x0E8, 0x348, 0x630, 0x2, 0x1, 0x10  }, */
	/* { 0x0E4, 0x344, 0x000, 0x5, 0x0, 0x140 }, */

	/* pinctrl_usdhc3_100mhz */
	/* { 0x124, 0x384, 0x604, 0x2, 0x1, 0x194 }, */
	/* { 0x128, 0x388, 0x60C, 0x2, 0x1, 0x1d4 }, */
	/* { 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d4 }, */
	/* { 0x10C, 0x36C, 0x614, 0x2, 0x1, 0x1d4 }, */
	/* { 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d4 }, */
	/* { 0x114, 0x374, 0x61C, 0x2, 0x1, 0x1d4 }, */
	/* { 0x11C, 0x37C, 0x620, 0x2, 0x1, 0x1d4 }, */
	/* { 0x0EC, 0x34C, 0x624, 0x2, 0x1, 0x1d4 }, */
	/* { 0x0F0, 0x350, 0x628, 0x2, 0x1, 0x1d4 }, */
	/* { 0x0F4, 0x354, 0x62C, 0x2, 0x1, 0x1d4 }, */
	/* { 0x0E8, 0x348, 0x630, 0x2, 0x1, 0x14  }, */

	/* pinctrl_usdhc3_200mhz */
	{ 0x124, 0x384, 0x604, 0x2, 0x1, 0x196 },
	{ 0x128, 0x388, 0x60C, 0x2, 0x1, 0x1d6 },
	{ 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d6 },
	{ 0x10C, 0x36C, 0x614, 0x2, 0x1, 0x1d6 },
	{ 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d6 },
	{ 0x114, 0x374, 0x61C, 0x2, 0x1, 0x1d6 },
	{ 0x11C, 0x37C, 0x620, 0x2, 0x1, 0x1d6 },
	{ 0x0EC, 0x34C, 0x624, 0x2, 0x1, 0x1d6 },
	{ 0x0F0, 0x350, 0x628, 0x2, 0x1, 0x1d6 },
	{ 0x0F4, 0x354, 0x62C, 0x2, 0x1, 0x1d6 },
	{ 0x0E8, 0x348, 0x630, 0x2, 0x1, 0x12  },

	/* pinctrl_wdog */
	{ 0x01c, 0x27c, 0x000, 0x1, 0x0, 0xc6 },
};


static Genode::uint32_t armstone_pinctrl_setting [][MAX] {
	/* pinctrl_hog */
	{ 0x030, 0x290, 0x000, 0x0, 0x0, 0x00144    },
	{ 0x018, 0x278, 0x000, 0x0, 0x0, 0x00014    },
	{ 0x050, 0x2B0, 0x000, 0x0, 0x0, 0x00014    },
	{ 0x238, 0x498, 0x000, 0x5, 0x0, 0x00144    },
	{ 0x23C, 0x49C, 0x000, 0x5, 0x0, 0x00014    },
	{ 0x20C, 0x46C, 0x000, 0x5, 0x0, 0x00046    },
	{ 0x1B8, 0x418, 0x000, 0x5, 0x0, 0x00104    },
	{ 0x208, 0x468, 0x000, 0x5, 0x0, 0x00104    },
	{ 0x018, 0x278, 0x000, 0x0, 0x0, 0x00012    },
	{ 0x020, 0x280, 0x000, 0x0, 0x0, 0x00142    },
	{ 0x024, 0x284, 0x000, 0x0, 0x0, 0x00142    },
	{ 0x240, 0x4A0, 0x000, 0x0, 0x0, 0x400001c3 },
	{ 0x244, 0x4A4, 0x000, 0x0, 0x0, 0x400001c3 },
	{ 0x24C, 0x4AC, 0x000, 0x0, 0x0, 0x40000019 },
	{ 0x248, 0x4A8, 0x000, 0x0, 0x0, 0x40000019 },

	/* pinctrl_ecspi2 */
	{ 0x1F0, 0x450, 0x568, 0x0, 0x1, 0x82 },
	{ 0x1F4, 0x454, 0x570, 0x0, 0x1, 0x82 },
	{ 0x1F8, 0x458, 0x56C, 0x0, 0x1, 0x82 },

	/* pinctrl_ecspi2_cs */
	{ 0x1FC, 0x45C, 0x000, 0x5, 0x0, 0x40000 },

	/* pinctrl_ecspi3 */
	{ 0x220, 0x480, 0x000, 0x1, 0x0, 0x82 },
	{ 0x224, 0x484, 0x000, 0x1, 0x0, 0x82 },
	{ 0x228, 0x488, 0x000, 0x1, 0x0, 0x82 },

	/* pinctrl_ecspi3_cs */
	{ 0x22C, 0x48C, 0x000, 0x5, 0x0, 0x40000 },

	/* pinctrl_eqos */
	{ 0x054, 0x2B4, 0x000, 0x0, 0x0, 0x3 },
	{ 0x058, 0x2B8, 0x590, 0x0, 0x1, 0x3 },
	{ 0x07C, 0x2DC, 0x000, 0x0, 0x0, 0x91 },
	{ 0x080, 0x2E0, 0x000, 0x0, 0x0, 0x11 },
	{ 0x084, 0x2E4, 0x000, 0x0, 0x0, 0x11 },
	{ 0x088, 0x2E8, 0x000, 0x0, 0x0, 0x91 },
	{ 0x078, 0x2D8, 0x000, 0x0, 0x0, 0x11 },
	{ 0x074, 0x2D4, 0x000, 0x0, 0x0, 0x11 },
	{ 0x068, 0x2C8, 0x000, 0x0, 0x0, 0x1f },
	{ 0x064, 0x2C4, 0x000, 0x0, 0x0, 0x1f },
	{ 0x060, 0x2C0, 0x000, 0x0, 0x0, 0x1f },
	{ 0x05C, 0x2BC, 0x000, 0x0, 0x0, 0x1f },
	{ 0x06C, 0x2CC, 0x000, 0x0, 0x0, 0x1f },
	{ 0x070, 0x2D0, 0x000, 0x0, 0x0, 0x1f },
	{ 0x150, 0x3B0, 0x000, 0x5, 0x0, 0x39 },
	{ 0x190, 0x3F0, 0x000, 0x5, 0x0, 0x159 },

	/* pinctrl_fec */
	{ 0x158, 0x3B8, 0x000, 0x4, 0x0, 0x3 },
	{ 0x15C, 0x3BC, 0x57C, 0x4, 0x1, 0x3 },
	{ 0x160, 0x3C0, 0x580, 0x4, 0x1, 0x91 },
	{ 0x164, 0x3C4, 0x584, 0x4, 0x1, 0x11 },
	{ 0x168, 0x3C8, 0x000, 0x4, 0x0, 0x11 },
	{ 0x16C, 0x3CC, 0x000, 0x4, 0x0, 0x91 },
	{ 0x174, 0x3D4, 0x000, 0x4, 0x0, 0x11 },
	{ 0x170, 0x3D0, 0x588, 0x4, 0x1, 0x11 },
	{ 0x178, 0x3D8, 0x000, 0x4, 0x0, 0x1f },
	{ 0x17C, 0x3DC, 0x000, 0x4, 0x0, 0x1f },
	{ 0x180, 0x3E0, 0x000, 0x4, 0x0, 0x1f },
	{ 0x184, 0x3E4, 0x000, 0x4, 0x0, 0x1f },
	{ 0x188, 0x3E8, 0x000, 0x4, 0x0, 0x1f },
	{ 0x18C, 0x3EC, 0x000, 0x4, 0x0, 0x1f },
	{ 0x14C, 0x3AC, 0x000, 0x5, 0x0, 0x39 },
	{ 0x148, 0x3A8, 0x000, 0x5, 0x0, 0x159 },

	/* pinctrl_pwm2 */
	{ 0x048, 0x2A8, 0x000, 0x5, 0x0, 0x116 },

	/* pinctrl_pwm1 */
	{ 0x1DC, 0x43C, 0x000, 0x1, 0x0, 0x116 },

	/* pinctrl_pwm4 */
	{ 0x1D0, 0x430, 0x000, 0x1, 0x0, 0x116 },

	/* pinctrl_pwm3 */
	{ 0x03C, 0x29C, 0x000, 0x2, 0x0, 0x116 },

	/* pinctrl_flexcan2 */
	{ 0x234, 0x494, 0x550, 0x4, 0x2, 0x154 },
	{ 0x230, 0x490, 0x000, 0x4, 0x0, 0x154 },

	/* pinctrl_i2c1 */
	{ 0x200, 0x460, 0x5A4, 0x0, 0x2, 0x400001c3 },
	{ 0x204, 0x464, 0x5A8, 0x0, 0x2, 0x400001c3 },

	/* pinctrl_i2c2 */
	{ 0x1E8, 0x448, 0x5AC, 0x2, 0x1, 0x400001c3 },
	{ 0x1EC, 0x44C, 0x5B0, 0x2, 0x1, 0x400001c3 },

	/* pinctrl_i2c3 */
	{ 0x210, 0x470, 0x5B4, 0x0, 0x4, 0x400001c3 },
	{ 0x214, 0x474, 0x5B8, 0x0, 0x4, 0x400001c3 },

	/* pinctrl_i2c5 */
	{ 0x134, 0x394, 0x5C4, 0x3, 0x1, 0x400001c3 },
	{ 0x144, 0x3A4, 0x5C8, 0x3, 0x1, 0x400001c3 },

	/* pinctrl_mipi_dsi_en */
	{ 0x034, 0x294, 0x000, 0x0, 0x0, 0x16 },

	/* pinctrl_pcie */
	{ 0x0EC, 0x34C, 0x000, 0x5, 0x0, 0x41 },
	{ 0x0F4, 0x354, 0x000, 0x5, 0x0, 0x41 },
	{ 0x0E8, 0x348, 0x000, 0x5, 0x0, 0x41 },

	/* pinctrl_pmic */
	{ 0x194, 0x3F4, 0x000, 0x5, 0x0, 0x41 },

	/* pinctrl_typec */
	{ 0x034, 0x294, 0x000, 0x0, 0x0, 0x24 },

	/* pinctrl_typec_mux */
	{ 0x038, 0x298, 0x000, 0x0, 0x0, 0x16 },

	/* pinctrl_reg_usdhc1_vmmc */
	{ 0x0B4, 0x314, 0x000, 0x5, 0x0, 0x41 },

	/* pinctrl_sai2 */
	{ 0x1A8, 0x408, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1AC, 0x40C, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1B0, 0x410, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1A4, 0x404, 0x000, 0x0, 0x0, 0xd6 },
	{ 0x1B4, 0x414, 0x000, 0x0, 0x0, 0xd6 },

	/* pinctrl_uart1 */
	{ 0x1A0, 0x400, 0x5E8, 0x4, 0x3, 0x140 },
	{ 0x19C, 0x3FC, 0x000, 0x4, 0x0, 0x140 },

	/* pinctrl_uart2 */
	{ 0x1C4, 0x424, 0x5F0, 0x4, 0x4, 0x140 },
	{ 0x1C8, 0x428, 0x000, 0x4, 0x0, 0x140 },
	{ 0x1BC, 0x41C, 0x000, 0x4, 0x0, 0x140 },
	{ 0x1C0, 0x420, 0x5EC, 0x4, 0x3, 0x140 },

	/* pinctrl_uart4 */
	{ 0x0F8, 0x358, 0x600, 0x4, 0x3, 0x140 },
	{ 0x0FC, 0x35C, 0x000, 0x4, 0x0, 0x140 },
	{ 0x100, 0x360, 0x000, 0x3, 0x0, 0x140 },
	{ 0x104, 0x364, 0x5FC, 0x3, 0x1, 0x140 },

	/* pinctrl_usb1_pwr */
	{ 0x044, 0x2A4, 0x000, 0x1, 0x0, 0x19 },

	/* pinctrl_usdhc1_200mhz */
	{ 0x08C, 0x2EC, 0x000, 0x0, 0x0, 0x196 },
	{ 0x090, 0x2F0, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x094, 0x2F4, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x098, 0x2F8, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x09C, 0x2FC, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0A0, 0x300, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0A4, 0x304, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0A8, 0x308, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0AC, 0x30C, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0B0, 0x310, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0B8, 0x318, 0x000, 0x0, 0x0, 0x196 },
	{ 0x0B4, 0x314, 0x000, 0x0, 0x0, 0x144 },

	/* pinctrl_usdhc2_200mhz */
	{ 0x0C0, 0x320, 0x000, 0x0, 0x0, 0x196 },
	{ 0x0C4, 0x324, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0C8, 0x328, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0CC, 0x32C, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0D0, 0x330, 0x000, 0x0, 0x0, 0x1d6 },
	{ 0x0D4, 0x334, 0x000, 0x0, 0x0, 0x1d6 },

	/* pinctrl_usdhc3_200mhz */
	{ 0x124, 0x384, 0x604, 0x2, 0x1, 0x196 },
	{ 0x128, 0x388, 0x60C, 0x2, 0x1, 0x1d6 },
	{ 0x108, 0x368, 0x610, 0x2, 0x1, 0x1d6 },
	{ 0x10C, 0x36C, 0x614, 0x2, 0x1, 0x1d6 },
	{ 0x110, 0x370, 0x618, 0x2, 0x1, 0x1d6 },
	{ 0x114, 0x374, 0x61C, 0x2, 0x1, 0x1d6 },
	{ 0x040, 0x2A0, 0x000, 0x4, 0x0, 0x0c1 },

	/* pinctrl_usdhc3_gpio */
	{ 0x04C, 0x2AC, 0x000, 0x0, 0x0, 0x1c4 },

	/* pinctrl_wdog */
	{ 0x01C, 0x27C, 0x000, 0x1, 0x0, 0x1c6 },
};


struct Driver::Iomuxc : Genode::Attached_mmio<0x10000>
{
	enum {
		PINCTRL_MMIO_BASE = 0x30330000,
		PINCTRL_MMIO_SIZE = 0x10000,
	};

	struct Mux : Mmio<32>
	{
		struct Reg : Register<0, 32>
		{
			struct Mode : Bitfield<0,3> {};
		};

		Mux(Byte_range_ptr const &range, Reg::access_t mux_mode)
		:
			Mmio<SIZE>(range)
		{
			write<Reg::Mode>(mux_mode);
		}
	};

	struct Misc : Mmio<32>
	{
		struct Reg : Register<0, 32> { };

		Misc(Byte_range_ptr const &range, Reg::access_t val)
		:
			Mmio<SIZE>(range)
		{
			write<Reg>(val);
		}
	};

	void _settings(auto pinctrl_setting, unsigned count)
	{
		for (unsigned i = 0; i < count; i++) {
			Mux mux(range_at(pinctrl_setting[i][MUX_REG]),
			        pinctrl_setting[i][MUX_MODE]);
			Misc conf(range_at(pinctrl_setting[i][CONF_REG]),
			        pinctrl_setting[i][CONF_VAL]);

			/* set input register only if it is set != 0 */
			if (pinctrl_setting[i][INPUT_REG])
				Misc input(range_at(pinctrl_setting[i][INPUT_REG]),
				           pinctrl_setting[i][INPUT_VAL]);
		}
	}

	Iomuxc(Env &env, Node const &info)
	:
		Attached_mmio<SIZE>(env, { (char*)PINCTRL_MMIO_BASE, SIZE })
	{
		using Board_name = String<64>;

		Board_name board;
		info.with_optional_sub_node("board", [&] (Node const &node) {
			board = node.attribute_value("name", Board_name()); });

		if (board == "imx8mp_iot_gate") {
			_settings(iot_gate_pinctrl_setting,
			          sizeof(iot_gate_pinctrl_setting) / (MAX*sizeof(uint32_t)));
			return;
		}

		if (board == "mnt_pocket") {
			_settings(mnt_pocket_pinctrl_setting,
			          sizeof(mnt_pocket_pinctrl_setting) / (MAX*sizeof(uint32_t)));
			return;
		}

		if (board == "imx8mp_armstone") {
			_settings(armstone_pinctrl_setting,
			          sizeof(armstone_pinctrl_setting) / (MAX*sizeof(uint32_t)));
			return;
		}
	}
};

#endif /* __PLATFORM__IMX__IOMUXC_H_ */
